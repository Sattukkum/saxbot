package main

import (
	"flag"
	"fmt"
	"log"
	"saxbot/activities"
	"saxbot/admins"
	"saxbot/environment"
	"saxbot/messages"
	redisClient "saxbot/redis"
	textcases "saxbot/text_cases"
	"slices"
	"strings"
	"time"

	"github.com/joho/godotenv"
	tele "gopkg.in/telebot.v4"
)

var lastKatyaMessage time.Time
var photoFlag = false
var todayQuiz activities.QuoteQuiz
var quizRunning = false
var quizAlreadyWas = false

func main() {
	godotenv.Load()

	environment := environment.GetMainEnvironment()
	botToken := environment.Token
	allowedChats := environment.AllowedChats
	katyaID := environment.KatyaID
	// adminsList := environment.Admins
	redisHost := environment.RedisHost
	redisPort := environment.RedisPort
	// redisDB := environment.RedisDB
	quizChatID := environment.QuizChatID

	// –§–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	clearRedis := flag.Bool("clear-redis", false, "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Redis –∏ –≤—ã–π—Ç–∏")
	showInfo := flag.Bool("info", false, "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Redis –∏ –≤—ã–π—Ç–∏")
	flag.Parse()

	if redisHost == "" {
		redisHost = "localhost"
	}
	if redisPort == "" {
		redisPort = "6379"
	}
	redisAddr := redisHost + ":" + redisPort

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
	err := redisClient.InitRedis(redisAddr, "", 0)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: %v", err)
	}
	defer redisClient.CloseRedis()

	if *showInfo {
		redisClient.ShowInfo()
		return
	}

	if *clearRedis {
		redisClient.ClearRedis()
		return
	}

	log.Printf("–û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMINS...")
	err = redisClient.RefreshAllUsersAdminStatus()
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞: %v", err)
	}

	pref := tele.Settings{
		Token:  botToken,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	go func() {
		for {
			time.Sleep(30 * time.Second)
			photoFlag = false
		}
	}()

	go func() {
		moscowTZ := time.FixedZone("Moscow", 3*60*60)

		// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –∏–∑ Redis
		todayQuiz, lastQuizDate := activities.GetQuizData()

		// –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ "–∫–≤–∏–∑ —É–∂–µ –±—ã–ª" –∏–∑ Redis
		if wasQuiz, err := redisClient.GetQuizAlreadyWas(); err == nil {
			quizAlreadyWas = wasQuiz
			if wasQuiz {
				log.Printf("–ö–≤–∏–∑ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω")
			}
		} else {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–ª–∞–≥ –∫–≤–∏–∑–∞ –∏–∑ Redis: %v", err)
		}

		quizRunning = false

		for {
			now := time.Now().In(moscowTZ)
			today := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, moscowTZ)

			// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∫–≤–∏–∑–∞ (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
			if !today.Equal(lastQuizDate) {
				todayQuiz = activities.GetNewQuiz()
				quizAlreadyWas = false
				lastQuizDate = today
			}

			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –∫–≤–∏–∑–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
			if todayQuiz.QuizTime.IsZero() {
				todayQuiz.QuizTime = activities.EstimateQuizTime()
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
				if err := redisClient.SaveQuizData(todayQuiz.Quote, todayQuiz.SongName, todayQuiz.QuizTime); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–≤–∏–∑–∞ –≤ Redis: %v", err)
				}
			}

			log.Printf("now: %s, todayQuiz.QuizTime: %s", now.Format("15:04"), todayQuiz.QuizTime.Format("15:04"))
			log.Printf("quizAlreadyWas: %v, quizRunning: %v", quizAlreadyWas, quizRunning)

			if now.After(todayQuiz.QuizTime) && !quizAlreadyWas && !quizRunning {
				if todayQuiz.Quote == "" || todayQuiz.SongName == "" {
					quote, songName := textcases.GetRandomQuote()
					todayQuiz.Quote = quote
					todayQuiz.SongName = songName
				}

				admins.RemovePref(bot, &tele.Chat{ID: quizChatID})

				quizRunning = true
				log.Printf("Starting quiz in chat %d", quizChatID)
				_, err = bot.Send(tele.ChatID(quizChatID), textcases.QuizAnnouncement, &tele.SendOptions{ThreadID: 0})
				if err != nil {
					log.Printf("Failed to send quiz intro message: %v", err)
				}
				time.Sleep(100 * time.Millisecond)
				quoteMessage := fmt.Sprintf("–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ü–∏—Ç–∞—Ç–∞:\n%s", todayQuiz.Quote)
				log.Printf("Sending quote message: %s", quoteMessage)
				_, err = bot.Send(tele.ChatID(quizChatID), quoteMessage, &tele.SendOptions{ThreadID: 0})
				if err != nil {
					log.Printf("Failed to send quiz question message: %v", err)
				}
			}

			time.Sleep(1 * time.Minute)
		}
	}()

	// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π –∏–∑ –ø–∞–º—è—Ç–∏
	go func() {
		for {
			time.Sleep(10 * time.Minute)
			err := redisClient.CleanupExpiredKeys()
			if err != nil {
				log.Printf("Error during cleanup: %v", err)
			}
		}
	}()

	lastKatyaMessage = time.Now().Add(-30 * time.Minute)

	bot.Handle(tele.OnText, func(c tele.Context) error {
		log.Printf("Received message: '%s' from user %d in chat %d", c.Message().Text, c.Message().Sender.ID, c.Message().Chat.ID)

		if !slices.Contains(allowedChats, c.Message().Chat.ID) {
			log.Printf("–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç %d. –û–∂–∏–¥–∞—é—Ç—Å—è —á–∞—Ç—ã %v", c.Message().Chat.ID, allowedChats)
			return nil
		}

		messageThreadID := c.Message().ThreadID

		userID := c.Message().Sender.ID
		isReply := c.Message().IsReply()
		var replyToID int64
		var replyToUserData *redisClient.UserData

		if isReply {
			replyToID = c.Message().ReplyTo.Sender.ID
		}

		userData, err := redisClient.GetUser(userID)
		if err != nil {
			log.Printf("Failed to get user data: %v", err)
			return nil
		}
		if userData.Username != c.Message().Sender.Username {
			userData.Username = c.Message().Sender.Username
			redisClient.SetUser(userID, userData)
			redisClient.SetUserPersistent(userID, userData)
		}

		if userData.Status == "muted" {
			bot.Delete(c.Message())
			return nil
		}

		if userData.Status == "banned" {
			userData.Status = "active"
			redisClient.SetUser(userID, userData)
			redisClient.SetUserPersistent(userID, userData)
			messages.SendMessage(c, fmt.Sprintf("@%s, —Ç–µ–±—è —Ä–∞–∑–±–∞–Ω–∏–ª–∏, –Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –í–µ–¥–∏ —Å–µ–±—è —Ö–æ—Ä–æ—à–æ", userData.Username), messageThreadID)
		}

		if isReply {
			replyToUserData, err = redisClient.GetUser(replyToID)
			if err != nil {
				log.Printf("Failed to get reply to user data: %v", err)
				return nil
			}
			if replyToUserData.Username != c.Message().ReplyTo.Sender.Username {
				replyToUserData.Username = c.Message().ReplyTo.Sender.Username
				redisClient.SetUser(replyToID, replyToUserData)
				redisClient.SetUserPersistent(replyToID, replyToUserData)
			}
		}

		if userID == katyaID {
			if time.Since(lastKatyaMessage) > 30*time.Minute {
				lastKatyaMessage = time.Now()
				messages.ReplyMessage(c, "üö®–í–ù–ò–ú–ê–ù–ò–ï! –ê–õ–ê–†–ú!üö® –ö–ê–¢–ï–ù–¨–ö–ê –í –ß–ê–¢–ï!üíÄ –≠–¢–û –ù–ï –£–ß–ï–ë–ù–ê–Ø –¢–†–ï–í–û–ì–ê! –ü–û–í–¢–û–†–Ø–Æ, –≠–¢–û –ù–ï –£–ß–ï–ë–ù–ê–Ø –¢–†–ï–í–û–ì–ê!‚õî\n‚ùó–í–°–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–õ–£–®–ê–¢–¨–°–Ø –ö–ê–¢–ï–ù–¨–ö–£‚ùó", messageThreadID)
			}
			lastKatyaMessage = time.Now()
		}

		if userData.IsAdmin || userID == katyaID || userData.IsWinner {
			switch c.Message().Text {
			case "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï":
				if isReply {
					replyToUserData.Warns++
					redisClient.SetUser(replyToID, replyToUserData)
					redisClient.SetUserPersistent(replyToID, replyToUserData)
					var text string
					if strings.EqualFold(c.Message().ReplyTo.Text, "–õ–µ–Ω–∞") {
						text = textcases.GetWarnCase(c.Message().ReplyTo.Sender.Username, true)
					} else {
						text = textcases.GetWarnCase(c.Message().ReplyTo.Sender.Username, false)
					}
					return messages.ReplyToOriginalMessage(c, text, messageThreadID)
				} else {
					return messages.ReplyMessage(c, "–¢—ã –∫–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—à—å?", messageThreadID)
				}
			case "–ò–∑–≤–∏–Ω–∏—Å—å", "–∏–∑–≤–∏–Ω–∏—Å—å", "–ò–ó–í–ò–ù–ò–°–¨":
				if isReply {
					return messages.ReplyToOriginalMessage(c, "–ò–∑–≤–∏–Ω–∏—Å—å –¥–æ–Ω. –°–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –±—ã–ª –Ω–µ –ø—Ä–∞–≤ –¥–æ–Ω. –ò–ª–∏ –∏–º–µ–π –≤ –≤–∏–¥—É ‚Äî –Ω–∞ –≤—Å—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –∂–∏–∑–Ω—å —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –≤—Ä–∞–∂–¥–∞", messageThreadID)
				}
			case "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ü–æ—à–ª–∞ –Ω–∞—Ö—É–π", "–ø–æ—à–ª–∞ –Ω–∞—Ö—É–π", "/ban":
				if isReply && userID != katyaID && (userData.IsAdmin || !userData.IsWinner) {
					if replyToUserData.IsAdmin {
						return messages.ReplyMessage(c, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, —Å–æ—Å–∏ –ø–∏—Å–æ—Å", messageThreadID)
					}
					user := c.Message().ReplyTo.Sender
					chatMember := &tele.ChatMember{User: user, Role: tele.Member}
					admins.BanUser(bot, c.Message().Chat, chatMember)
					bot.Delete(c.Message().ReplyTo)
					return messages.ReplyMessage(c, fmt.Sprintf("@%s –∏–¥–µ—Ç –Ω–∞—Ö—É–π –∏–∑ —á–∞—Ç–∏–∫–∞", user.Username), messageThreadID)
				} else {
					if userID == katyaID {
						return messages.ReplyMessage(c, "–ö–∞—Ç–µ–Ω—å–∫–∞, –∑–∞—á–∏–ª–ª—å—Å—è, –æ—Å—Ç—ã–Ω—å, —É—Å–ø–æ–∫–æ–π—Å—è, –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫", messageThreadID)
					}
					return messages.ReplyMessage(c, "–ë–∞–Ω—Ö–∞–º–º–µ—Ä –≥–æ—Ç–æ–≤. –ö–æ–≥–æ –ø–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π?", messageThreadID)
				}
			case "–ú—É—Ç", "–º—É—Ç", "–ï–±–∞–ª–æ –∑–∞–≤–∞–ª–∏", "–µ–±–∞–ª–æ –∑–∞–≤–∞–ª–∏", "/mute":
				if isReply && userID != katyaID && (userData.IsAdmin || !userData.IsWinner) {
					if replyToUserData.IsAdmin {
						return messages.ReplyMessage(c, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –º—É—Ç–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, —Å–æ—Å–∏ –ø–∏—Å–æ—Å", messageThreadID)
					}
					user := c.Message().ReplyTo.Sender
					chatMember := &tele.ChatMember{User: user, Role: tele.Member, Rights: tele.Rights{
						CanSendMessages: false,
					}}
					admins.MuteUser(bot, c.Chat(), chatMember)
					return messages.ReplyMessage(c, fmt.Sprintf("@%s –ø–æ–º–æ–ª—á–∏—Ç –ø–æ–ª—á–∞—Å–∏–∫–∞ –∏ –ø–æ–¥—É–º–∞–µ—Ç –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏", replyToUserData.Username), messageThreadID)
				} else {
					if userID == katyaID {
						return messages.ReplyMessage(c, "–ö–∞—Ç–µ–Ω—å–∫–∞, –∑–∞—á–∏–ª–ª—å—Å—è, –æ—Å—Ç—ã–Ω—å, —É—Å–ø–æ–∫–æ–π—Å—è, –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫", messageThreadID)
					}
					return messages.ReplyMessage(c, "–ö–æ–≥–æ –º—É—Ç–∏—Ç—å?", messageThreadID)
				}
			case "–†–∞–∑–º—É—Ç", "—Ä–∞–∑–º—É—Ç", "/unmute":
				if isReply {
					chatMember := &tele.ChatMember{User: c.Message().ReplyTo.Sender, Role: tele.Member, Rights: tele.Rights{
						CanSendMessages: true,
					}}
					admins.UnmuteUser(bot, c.Chat(), chatMember)
					return messages.ReplyMessage(c, fmt.Sprintf("@%s —Ä–∞–∑–º—É—á–µ–Ω. –ê —Ç–æ —á–µ –∫–∞–∫ –≤–æ–¥—ã –≤ —Ä–æ—Ç –Ω–∞–±—Ä–∞–ª", replyToUserData.Username), messageThreadID)
				} else {
					return messages.ReplyMessage(c, "–ö–æ–≥–æ —Ä–∞–∑–º—É—Ç–∏—Ç—å?", messageThreadID)
				}
			case "–ù–∞—Ü–∏–∫", "–Ω–∞—Ü–∏–∫", "–ù–ê–¶–ò–ö":
				if isReply && userID != katyaID && (userData.IsAdmin || !userData.IsWinner) {
					if replyToUserData.IsAdmin {
						return messages.ReplyMessage(c, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, —Å–æ—Å–∏ –ø–∏—Å–æ—Å", messageThreadID)
					}
					user := c.Message().ReplyTo.Sender
					messages.ReplyToOriginalMessage(c, fmt.Sprintf("@%s, —Å–∫–∞–∂–∏ –∞—É—Ñ–∏–¥–µ—Ä–∑–µ–π–Ω —Å–≤–æ–∏–º –Ω–∞—Ü–∏—Å—Ç—Å–∫–∏–º —è–π—Ü–∞–º!", user.Username), messageThreadID)
					time.Sleep(1 * time.Second)
					chatMember := &tele.ChatMember{User: user, Role: tele.Member}
					admins.BanUser(bot, c.Message().Chat, chatMember)
					bot.Delete(c.Message().ReplyTo)
					return messages.SendMessage(c, fmt.Sprintf("@%s –∏–¥–µ—Ç –Ω–∞—Ö—É–π –∏–∑ —á–∞—Ç–∏–∫–∞", user.Username), messageThreadID)
				} else {
					if userID == katyaID {
						return messages.ReplyMessage(c, "–ö–∞—Ç–µ–Ω—å–∫–∞, –∑–∞—á–∏–ª–ª—å—Å—è, –æ—Å—Ç—ã–Ω—å, —É—Å–ø–æ–∫–æ–π—Å—è, –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫", messageThreadID)
					}
					return messages.ReplyMessage(c, "–ö–æ–º—É —è–π—Ü–∞ –∂–º—É—Ç?", messageThreadID)
				}
			}
		}
		switch c.Message().Text {
		case "üé∞":
			bot.Delete(c.Message())
			return nil
		case "–ò–Ω—Ñ–∞", "–∏–Ω—Ñ–∞", "/info":
			text := textcases.GetInfo()
			return messages.SendMessage(c, text, messageThreadID)
		case "–ê–¥–º–∏–Ω", "–∞–¥–º–∏–Ω", "/report":
			if isReply {
				return messages.ReplyToOriginalMessage(c, fmt.Sprintf("@%s –≤—ã–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–æ–≤. –í —á–∞—Ç–∏–∫–µ –¥–∏—á—å\n@fatiurs, @puwyb, @murmuIlya, @RavenMxL", userData.Username), messageThreadID)
			} else {
				return messages.SendMessage(c, fmt.Sprintf("@%s –≤—ã–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–æ–≤. –í —á–∞—Ç–∏–∫–µ –¥–∏—á—å\n@fatiurs, @puwyb, @murmuIlya, @RavenMxL", userData.Username), messageThreadID)
			}
		case "–ü—Ä–µ–¥—ã", "–ø—Ä–µ–¥—ã", "/warns":
			switch {
			case userData.Warns == 0:
				return messages.ReplyMessage(c, "–¢–µ–±—è –µ—â—ë –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏? –°—Ä–æ—á–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –µ–≥–æ!", messageThreadID)
			case userData.Warns > 0 && userData.Warns < 10:
				return messages.ReplyMessage(c, fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –ü–æ–º–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω ‚Äî –∑–Ω–∞—á–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω", userData.Warns), messageThreadID)
			case userData.Warns >= 10 && userData.Warns < 100:
				return messages.ReplyMessage(c, fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –≠—Ç–æ—Ç –ø–∞—Ä–µ–Ω—å —Å–æ–≤—Å–µ–º —Å–ª–æ–≤ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç?", userData.Warns), messageThreadID)
			case userData.Warns >= 100 && userData.Warns < 1000:
				return messages.ReplyMessage(c, fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –Ø –æ—Ç —Ç–µ–±—è –≤ —Å–≤–µ—Ç–ª–æ–º –∞—Ö—É–µ. –¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—à—å?", userData.Warns), messageThreadID)
			case userData.Warns >= 1000:
				return messages.ReplyMessage(c, fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –¢—ã –ø–æ—Å—Ç–∏–≥ –Ω–∏—Ä–≤–∞–Ω—É –∏ –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–æ–∑–Ω–∞–Ω–∏—è. –¢–µ–±—è –±–æ–ª—å—à–µ –Ω–∏—á—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç", userData.Warns), messageThreadID)
			}
		}
		if quizRunning {
			if strings.EqualFold(c.Message().Text, todayQuiz.SongName) {
				quizRunning = false
				quizAlreadyWas = true
				redisClient.SetQuizAlreadyWas()
				winnerTitle := textcases.GetRandomTitle()
				messages.ReplyMessage(c, fmt.Sprintf("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Å–Ω—è: %s", todayQuiz.SongName), messageThreadID)
				time.Sleep(100 * time.Millisecond)
				messages.ReplyMessage(c, fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, %s! –¢—ã –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª %s –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–≤–∏–∑–∞!", c.Message().Sender.Username, winnerTitle), messageThreadID)
				chatMember := &tele.ChatMember{User: c.Message().Sender, Role: tele.Member}
				admins.SetPref(bot, c.Chat(), chatMember, winnerTitle)
			}
		}
		return nil
	})

	bot.Handle(tele.OnUserJoined, func(c tele.Context) error {
		joinedUser := c.Message().UserJoined
		log.Printf("User %d joined chat %d", joinedUser.ID, c.Message().Chat.ID)

		if !slices.Contains(allowedChats, c.Message().Chat.ID) {
			return nil
		}

		userData, err := redisClient.GetUser(joinedUser.ID)
		if err != nil {
			log.Printf("Failed to get user data: %v", err)
			return nil
		}
		if userData.Username != joinedUser.Username {
			userData.Username = joinedUser.Username
			redisClient.SetUser(joinedUser.ID, userData)
			redisClient.SetUserPersistent(joinedUser.ID, userData)
		}

		return messages.SendMessage(c, fmt.Sprintf(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @%s! –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç–∏–∫—É –±—Ä–∞—Ç—Å—Ç–≤–∞ –Ω–µ–∂–∏—Ç–∏. –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É "–ò–Ω—Ñ–∞", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—É—Ç –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ`, userData.Username), c.Message().ThreadID)
	})

	bot.Handle(tele.OnPhoto, func(c tele.Context) error {
		log.Printf("Received photo from user %d in chat %d", c.Message().Sender.ID, c.Message().Chat.ID)

		if !slices.Contains(allowedChats, c.Message().Chat.ID) {
			return nil
		}

		userData, err := redisClient.GetUser(c.Message().Sender.ID)
		if err != nil {
			log.Printf("Failed to get user data: %v", err)
			return nil
		}
		if userData.Username != c.Message().Sender.Username {
			userData.Username = c.Message().Sender.Username
			redisClient.SetUser(c.Message().Sender.ID, userData)
			redisClient.SetUserPersistent(c.Message().Sender.ID, userData)
		}

		userID := c.Message().Sender.ID

		if userID == katyaID && !photoFlag {
			photoFlag = true
			lastKatyaMessage = time.Now()
			return messages.ReplyMessage(c, "üíñ –°–†–û–ß–ù–û –í–°–ï–ú –õ–Æ–ë–û–í–ê–¢–¨–°–Ø –ù–û–í–û–ô –§–û–¢–û–ß–ö–û–ô –ö–ê–¢–ï–ù–¨–ö–ò! üíñ\nüò† –ó–ê –ù–ï–ì–ê–¢–ò–í–ù–´–ï –†–ï–ê–ö–¶–ò–ò –ü–û–õ–£–ß–ò–¢–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! üò†", c.Message().ThreadID)
		}

		return nil
	})

	bot.Handle(tele.OnDice, func(c tele.Context) error {
		log.Printf("Received dice from user %d in chat %d", c.Message().Sender.ID, c.Message().Chat.ID)
		if c.Message().Dice.Type == tele.Slot.Type && !admins.IsAdmin(c.Message().Sender.ID) {
			bot.Delete(c.Message())
		}
		return nil
	})

	bot.Start()
}
