package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	redisClient "saxbot/redis"
	textcases "saxbot/text_cases"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/joho/godotenv"
	tele "gopkg.in/telebot.v4"
)

var katyaFlag = false

func main() {
	godotenv.Load()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	clearRedis := flag.Bool("clear-redis", false, "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Redis –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
	showInfo := flag.Bool("info", false, "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Redis –∏ –≤—ã–π—Ç–∏")
	flag.Parse()

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	redisHost := os.Getenv("REDIS_HOST")
	if redisHost == "" {
		redisHost = "localhost"
	}
	redisPort := os.Getenv("REDIS_PORT")
	if redisPort == "" {
		redisPort = "6379"
	}
	redisAddr := redisHost + ":" + redisPort

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
	err := redisClient.InitRedis(redisAddr, "", 0)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: %v", err)
	}
	defer redisClient.CloseRedis()

	// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if *showInfo {
		keys, err := redisClient.GetAllKeys()
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: %v", err)
		}

		fmt.Printf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n")
		fmt.Printf("–í—Å–µ–≥–æ –∫–ª—é—á–µ–π: %d\n", len(keys))

		if len(keys) > 0 {
			fmt.Printf("–ö–ª—é—á–∏:\n")
			for i, key := range keys {
				if i >= 10 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
					fmt.Printf("   ... –∏ –µ—â–µ %d –∫–ª—é—á–µ–π\n", len(keys)-10)
					break
				}
				fmt.Printf("   - %s\n", key)
			}
		} else {
			fmt.Printf("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞\n")
		}
		return
	}

	if *clearRedis {
		fmt.Printf("–û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Redis...\n")

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—ã–ª–æ –¥–æ –æ—á–∏—Å—Ç–∫–∏
		keys, err := redisClient.GetAllKeys()
		if err == nil {
			fmt.Printf("–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: %d\n", len(keys))
		}

		err = redisClient.FlushAll()
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: %v", err)
		}

		fmt.Printf("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Redis –æ—á–∏—â–µ–Ω–∞!\n")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
		keys, err = redisClient.GetAllKeys()
		if err == nil {
			fmt.Printf("–ö–ª—é—á–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: %d\n", len(keys))
		}
	}

	pref := tele.Settings{
		Token:  os.Getenv("BOT_TOKEN"),
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	go func() {
		for {
			time.Sleep(1 * time.Hour)
			katyaFlag = false
		}
	}()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	allowedChats := os.Getenv("ALLOWED_CHATS")

	katyaID := os.Getenv("KATYA_ID")

	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
	allowedChatsSlice := strings.Split(allowedChats, ",")
	var allowedChatsInts []int64
	for i, s := range allowedChatsSlice {
		s = strings.TrimSpace(s)
		if s == "" {
			continue
		}
		chatID, err := strconv.ParseInt(s, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–∞ #%d '%s': %v", i+1, s, err)
			continue
		}
		allowedChatsInts = append(allowedChatsInts, chatID)
	}

	// –ü–∞—Ä—Å–∏–º ID –ö–∞—Ç–∏
	katyaIDInt, _ := strconv.ParseInt(strings.TrimSpace(katyaID), 10, 64)

	bot.Handle(tele.OnText, func(c tele.Context) error {
		log.Printf("Received message: '%s' from user %d in chat %d", c.Message().Text, c.Message().Sender.ID, c.Message().Chat.ID)

		if !slices.Contains(allowedChatsInts, c.Message().Chat.ID) {
			log.Printf("–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç %d. –û–∂–∏–¥–∞—é—Ç—Å—è —á–∞—Ç—ã %v", c.Message().Chat.ID, allowedChatsInts)
			return nil
		}

		userID := c.Message().Sender.ID
		isReply := c.Message().IsReply()
		var replyToID int64
		var replyToUserData *redisClient.UserData

		if isReply {
			replyToID = c.Message().ReplyTo.Sender.ID
		}

		userData, err := redisClient.GetUser(userID)
		if err != nil {
			log.Printf("Failed to get user data: %v", err)
			return nil
		}
		if userData.Username != c.Message().Sender.Username {
			userData.Username = c.Message().Sender.Username
			redisClient.SetUser(userID, userData)
		}

		if userData.Status == "muted" {
			bot.Delete(c.Message())
			return nil
		}

		if userData.Status == "banned" {
			userData.Status = "active"
			redisClient.SetUser(userID, userData)
			return c.Send(fmt.Sprintf("@%s, —Ç–µ–±—è —Ä–∞–∑–±–∞–Ω–∏–ª–∏, –Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –í–µ–¥–∏ —Å–µ–±—è —Ö–æ—Ä–æ—à–æ", userData.Username))
		}

		if isReply {
			replyToUserData, err = redisClient.GetUser(replyToID)
			if err != nil {
				log.Printf("Failed to get reply to user data: %v", err)
				return nil
			}
			if replyToUserData.Username != c.Message().ReplyTo.Sender.Username {
				replyToUserData.Username = c.Message().ReplyTo.Sender.Username
				redisClient.SetUser(replyToID, replyToUserData)
			}
		}

		if userID == katyaIDInt && !katyaFlag {
			katyaFlag = true
			return c.Reply("üö®–í–ù–ò–ú–ê–ù–ò–ï! –ê–õ–ê–†–ú!üö® –ö–ê–¢–ï–ù–¨–ö–ê –í –ß–ê–¢–ï!üíÄ –≠–¢–û –ù–ï –£–ß–ï–ë–ù–ê–Ø –¢–†–ï–í–û–ì–ê, –ü–û–í–¢–û–†–Ø–Æ, –≠–¢–û –ù–ï –£–ß–ï–ë–ù–ê–Ø –¢–†–ï–í–û–ì–ê!‚õî")
		}

		if userData.IsAdmin {
			switch c.Message().Text {
			case "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ":
				if isReply {
					replyToUserData.Warns++
					redisClient.SetUser(replyToID, replyToUserData)
					text := textcases.GetWarnCase(c.Message().ReplyTo.Sender.Username)
					return c.Send(text)
				} else {
					return c.Reply("–¢—ã –∫–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—à—å?")
				}
			case "–ò–∑–≤–∏–Ω–∏—Å—å", "–∏–∑–≤–∏–Ω–∏—Å—å", "–ò–ó–í–ò–ù–ò–°–¨":
				if isReply {
					return c.Send("–ò–∑–≤–∏–Ω–∏—Å—å –¥–æ–Ω. –°–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –±—ã–ª –Ω–µ –ø—Ä–∞–≤ –¥–æ–Ω. –ò–ª–∏ –∏–º–µ–π –≤ –≤–∏–¥—É - –Ω–∞ –≤—Å—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –∂–∏–∑–Ω—å —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –≤—Ä–∞–∂–¥–∞")
				}
			case "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ü–æ—à–ª–∞ –Ω–∞—Ö—É–π", "–ø–æ—à–ª–∞ –Ω–∞—Ö—É–π", "/ban":
				if isReply {
					if replyToUserData.IsAdmin {
						return c.Reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, —Å–æ—Å–∏ –ø–∏—Å–æ—Å")
					}
					user := c.Message().ReplyTo.Sender
					chatMember := &tele.ChatMember{User: user, Role: tele.Member}
					bot.Ban(c.Message().Chat, chatMember)
					bot.Delete(c.Message().ReplyTo)
					replyToUserData.Status = "banned"
					redisClient.SetUser(replyToID, replyToUserData)
					return c.Send(fmt.Sprintf("@%s –∏–¥–µ—Ç –Ω–∞—Ö—É–π –∏–∑ —á–∞—Ç–∏–∫–∞", user.Username))
				} else {
					return c.Reply("–ë–∞–Ω—Ö–∞–º–º–µ—Ä –≥–æ—Ç–æ–≤. –ö–æ–≥–æ –ø–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π?")
				}
			case "–ú—É—Ç", "–º—É—Ç", "–ï–±–∞–ª–æ –∑–∞–≤–∞–ª–∏", "–µ–±–∞–ª–æ –∑–∞–≤–∞–ª–∏", "/mute":
				if isReply {
					if replyToUserData.IsAdmin {
						return c.Reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –º—É—Ç–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, —Å–æ—Å–∏ –ø–∏—Å–æ—Å")
					}
					replyToUserData.Status = "muted"
					redisClient.SetUser(replyToID, replyToUserData)
					go func() {
						time.Sleep(30 * time.Minute)
						replyToUserData.Status = "active"
						redisClient.SetUser(replyToID, replyToUserData)
					}()
					return c.Send(fmt.Sprintf("@%s –ø–æ–º–æ–ª—á–∏—Ç –ø–æ–ª—á–∞—Å–∏–∫–∞ –∏ –ø–æ–¥—É–º–∞–µ—Ç –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏", replyToUserData.Username))
				} else {
					return c.Reply("–ö–æ–≥–æ –º—É—Ç–∏—Ç—å?")
				}
			}
		}
		if isReply {
			switch c.Message().Text {
			case "+":
				redisClient.UpdateUserReputation(replyToID, 1)
				return c.Send(fmt.Sprintf("@%s –ø–æ–≤—ã—à–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é @%s –Ω–∞ +1 (–¥–æ %d)", userData.Username, replyToUserData.Username, replyToUserData.Reputation+1))
			case "-":
				redisClient.UpdateUserReputation(replyToID, -1)
				return c.Send(fmt.Sprintf("@%s –ø–æ–Ω–∏–∂–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é @%s –Ω–∞ -1 (–¥–æ %d)", userData.Username, replyToUserData.Username, replyToUserData.Reputation-1))
			}
		}
		switch c.Message().Text {
		case "–ò–Ω—Ñ–∞", "–∏–Ω—Ñ–∞", "/info":
			text := textcases.GetInfo()
			return c.Send(text)
		case "–†–µ–ø–∞", "—Ä–µ–ø–∞", "/rep":
			switch {
			case userData.Reputation == 0:
				return c.Reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –¢—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π, –Ω–æ —Å–∫–æ—Ä–æ –Ω–µ–∂–∏—Ç—å –æ —Ç–µ–±–µ —É—Å–ª—ã—à–∏—Ç")
			case userData.Reputation > 0 && userData.Reputation < 10:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –¢—ã —É–∂–µ –Ω–∞—á–∞–ª —Å–≤–æ–π –ø—É—Ç—å –ø–æ –∫–ª–∞–¥–±–∏—â—É", userData.Reputation))
			case userData.Reputation >= 10 && userData.Reputation < 100:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –¢—ã —É–≤–∞–∂–∞–µ–º—ã–π —á–ª–µ–Ω –∫–ª–∞–¥–±–∏—â–µ–Ω—Å–∫–æ–π –±—Ä–∞—Ç–∏–∏", userData.Reputation))
			case userData.Reputation >= 100:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –¢–æ–±–æ–π –≥–æ—Ä–¥–∏—Ç—Å—è –≤—Å—è –Ω–µ–∂–∏—Ç—å!", userData.Reputation))
			case userData.Reputation < 0 && userData.Reputation > -10:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –ù–µ–∂–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–±–µ —Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ–º, –Ω–æ —Ç—ã –µ—â–µ –º–æ–∂–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é", userData.Reputation))
			case userData.Reputation <= -10 && userData.Reputation > -100:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –¢–∞–∫–∏—Ö –Ω–∞ –Ω–∞—à–µ–º –∫–ª–∞–¥–±–∏—â–µ –Ω–µ —É–≤–∞–∂–∞—é—Ç. –°—Ä–æ—á–Ω–æ –¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å", userData.Reputation))
			case userData.Reputation <= -100:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –¢—ã –≤–æ–æ–±—â–µ –Ω–µ –Ω–µ–∂–∏—Ç—å, —Ç—ã –ª–∏–±–µ—Ä–∞–ª –ø—Ä–æ—Å—Ç–æ–π", userData.Reputation))
			}
		case "–ü—Ä–µ–¥—ã", "–ø—Ä–µ–¥—ã", "/warns":
			switch {
			case userData.Warns == 0:
				return c.Reply("–¢–µ–±—è –µ—â—ë –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏? –°—Ä–æ—á–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –µ–≥–æ!")
			case userData.Warns > 0 && userData.Warns < 10:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –ü–æ–º–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω - –∑–Ω–∞—á–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω", userData.Warns))
			case userData.Warns >= 10 && userData.Warns < 100:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –≠—Ç–æ—Ç –ø–∞—Ä–µ–Ω—å —Å–æ–≤—Å–µ–º —Å–ª–æ–≤ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç?", userData.Warns))
			case userData.Warns >= 100 && userData.Warns < 1000:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –Ø –æ—Ç —Ç–µ–±—è –≤ —Å–≤–µ—Ç–ª–æ–º –∞—Ö—É–µ. –¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—à—å?", userData.Warns))
			case userData.Warns >= 1000:
				return c.Reply(fmt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –¢—ã –ø–æ—Å—Ç–∏–≥ –Ω–∏—Ä–≤–∞–Ω—É –∏ –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–æ–∑–Ω–∞–Ω–∏—è. –¢–µ–±—è –±–æ–ª—å—à–µ –Ω–∏—á—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç", userData.Warns))
			}
		}
		return nil
	})

	bot.Handle(tele.OnUserJoined, func(c tele.Context) error {
		log.Printf("User %d joined chat %d", c.Message().Sender.ID, c.Message().Chat.ID)

		if !slices.Contains(allowedChatsInts, c.Message().Chat.ID) {
			return nil
		}

		userData, err := redisClient.GetUser(c.Message().Sender.ID)
		if err != nil {
			log.Printf("Failed to get user data: %v", err)
			return nil
		}
		if userData.Username != c.Message().Sender.Username {
			userData.Username = c.Message().Sender.Username
			redisClient.SetUser(c.Message().Sender.ID, userData)
		}

		return c.Send(fmt.Sprintf(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @%s! –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç–∏–∫—É –±—Ä–∞—Ç—Å—Ç–≤—É –Ω–µ–∂–∏—Ç–∏. –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç–∏–∫ –∫–æ–º–∞–Ω–¥—É "–ò–Ω—Ñ–∞", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—É—Ç –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ`, userData.Username))
	})

	bot.Start()
}
